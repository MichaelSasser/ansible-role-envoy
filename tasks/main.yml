---
# tasks file for ansible-role-envoy

- name: Ensure envoy image is pulled
  community.docker.docker_image:
    name: "{{ envoy_docker_image }}"
    tag: "{{ envoy_docker_image_tag }}"
    source: pull

# the /envoy/certs dir will be created by volumes later on
- name: Ensure configuration dir is created
  file:
    path: "{{ envoy_config_directory }}"
    state: directory
  # notify:
  #   - start envoy

# - name: xDS debug
#   ansible.builtin.debug:
#     msg: "{{ envoy_xds_config }}"

# - name: xDS debug loop
#   ansible.builtin.debug:
#     msg: "{{ item.data }}"
#   loop: "{{ envoy_xds_config |flatten(levels=1) }}"

- name: Ensure xDS configuration is copied
  template:
    src: "{{ item.config }}.yaml.j2"
    dest: "{{ item.dest }}"
    owner: "101"
    group: "101"
    mode: 0600
  loop: "{{ envoy_xds_config }}"

# - meta: end_play

- name: Change owner and group of certificates
  ansible.builtin.file:
    path: /etc/letsencrypt/live/
    owner: "101"
    group: "101"
    recurse: true
    mode: 0777

- name: Ensure envoy container runs
  community.docker.docker_container:
    name: "{{ envoy_container_name }}"
    image: "{{ envoy_docker_image }}:{{ envoy_docker_image_tag }}"
    # restart_policy: always
    state: present
    pull: "{{ envoy_upgrade | default(false) | bool }}"
    # restart: yes
    # memory: "{{ envoy_container_memory_limit | default(omit) }}"
    volumes:
      - "{{ envoy_config_directory }}:/envoy/config:ro"
      - /etc/letsencrypt:/etc/letsencrypt:ro
    ports:
      - "{{ envoy_port }}:8080"
      # - "[::]:{{ envoy_port }}:8080"
      - "{{ envoy_port_ssl }}:4443"
      # - "[::]:{{ envoy_port_ssl }}:4443"
      - "{{ envoy_port_ssl }}:4443/udp"
      # - "[::]:{{ envoy_port_ssl }}:4443/udp"
      - "{{ envoy_admin_port }}:9901"
      # - "[::]:{{ envoy_admin_port }}:9901"
    env:
      ENVOY_UID: "101"
      ENVOY_GID: "101"
    entrypoint: envoy
    command: |
      "--config-path {{ envoy_config_path }}"
    container_default_behavior: no_defaults
    networks: "{{ envoy_networks }}"
    networks_cli_compatible: yes
    network_mode: default
  register: result_container_create
  # notify:  # -> restart
  #   - start envoy

# TODO:
# - if envoy is running -> hot reload
# - if envoy is not running -> start/restart
# - if image was updated -> start/restart

- name: Get envoy container infos
  docker_container_info:
    name: "{{ envoy_container_name }}"
  register: result_container_info

- name: Determine whether envoy could be hot-reloaded instead of restarted
  ansible.builtin.set_fact:
    envoy_container_is_running: "{{ (true if result_container_info.container['State']['Status'] == 'running' else false) | default(false) | bool }}"
    envoy_container_has_changed: "{{ true if result_container_create.changed == true else false | bool }}"

- name: Set-up restart/reload policy
  ansible.builtin.set_fact:
    envoy_restart_policy: "{{ 'hot-reload' if (envoy_container_is_running == true and envoy_container_has_changed == false) else 'restart' }}"

- name: Reload envoy
  debug:
    # msg: Hot-Reloading Envoy  (NOT YET IMPLEMENTED -> RESTARTING)
    msg: Hot-Reloading is not yet implemented. Restarting instead.
  changed_when: "'true' == 'true'"
  notify:
    - restart envoy
  when: envoy_restart_policy == 'hot-reload'

- name: Restart envoy
  debug:
    msg: Restarting Envoy
  changed_when: "'true' == 'true'"
  notify:
    # - hot-reload envoy
    - restart envoy
  when: envoy_restart_policy == 'restart'
# - meta: end_play

# - name: Notify envoy to restart
#   debug:
#     msg: Restarting Envoy
#   tags: restart
#   changed_when: "'true' == 'true'"
#   notify:
#     - start envoy
